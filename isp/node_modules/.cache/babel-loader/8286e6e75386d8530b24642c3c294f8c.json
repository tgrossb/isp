{"ast":null,"code":"var e,\n    n = require(\"react\"),\n    t = (e = require(\"resize-observer-polyfill\")) && \"object\" == typeof e && \"default\" in e ? e.default : e,\n    i = \"undefined\" != typeof window && window.document && window.document.createElement ? n.useLayoutEffect : n.useEffect;\n\nmodule.exports = function (e) {\n  void 0 === e && (e = {});\n  var o = e.maxFontSize;\n  void 0 === o && (o = 100);\n  var r = e.minFontSize;\n  void 0 === r && (r = 20);\n  var f = e.resolution;\n  void 0 === f && (f = 5);\n  var u = n.useCallback(function () {\n    return {\n      fontSize: o,\n      fontSizePrev: r,\n      fontSizeMax: o,\n      fontSizeMin: r\n    };\n  }, [o, r]),\n      a = n.useRef(null),\n      c = n.useState(u),\n      S = c[0],\n      l = c[1],\n      s = S.fontSize,\n      z = S.fontSizeMax,\n      d = S.fontSizeMin,\n      v = S.fontSizePrev,\n      m = null,\n      w = n.useState(function () {\n    return new t(function () {\n      m = window.requestAnimationFrame(function () {\n        l(u());\n      });\n    });\n  })[0];\n  return n.useEffect(function () {\n    return a.current && w.observe(a.current), function () {\n      m && window.cancelAnimationFrame(m), w.disconnect();\n    };\n  }, [m, w]), i(function () {\n    var e = Math.abs(s - v) <= f,\n        n = !!a.current && (a.current.scrollHeight > a.current.offsetHeight || a.current.scrollWidth > a.current.offsetWidth),\n        t = s > v;\n    if (e) n && l({\n      fontSize: v < s ? v : s - (v - s),\n      fontSizeMax: z,\n      fontSizeMin: d,\n      fontSizePrev: v\n    });else {\n      var i,\n          o = z,\n          r = d;\n      n ? (i = t ? v - s : d - s, o = Math.min(z, s)) : (i = t ? z - s : v - s, r = Math.max(d, s)), l({\n        fontSize: s + i / 2,\n        fontSizeMax: o,\n        fontSizeMin: r,\n        fontSizePrev: s\n      });\n    }\n  }, [s, z, d, v, a, f]), {\n    fontSize: s + \"%\",\n    ref: a\n  };\n};","map":{"version":3,"sources":["../index.ts"],"names":["useIsoLayoutEffect","window","document","createElement","useLayoutEffect","useEffect","ref$1","initState","useCallback","fontSize","maxFontSize","fontSizePrev","minFontSize","fontSizeMax","fontSizeMin","ref","useRef","useState","animationFrameId","ResizeObserver","requestAnimationFrame","setState","current","ro","observe","cancelAnimationFrame","disconnect","isDone","Math","abs","resolution","isOverflow","scrollHeight","offsetHeight","scrollWidth","offsetWidth","isAsc","delta","newMax","newMin","min","max"],"mappings":"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","sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport type TOptions = {\n  maxFontSize?: number;\n  minFontSize?: number;\n  resolution?: number;\n};\n\n// suppress useLayoutEffect warning when rendering on the server\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsoLayoutEffect =\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n    ? useLayoutEffect\n    : useEffect;\n\nconst useFitText = ({\n  maxFontSize = 100,\n  minFontSize = 20,\n  resolution = 5,\n}: TOptions = {}) => {\n  const initState = useCallback(\n    () => ({\n      fontSize: maxFontSize,\n      fontSizePrev: minFontSize,\n      fontSizeMax: maxFontSize,\n      fontSizeMin: minFontSize,\n    }),\n    [maxFontSize, minFontSize],\n  );\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [state, setState] = useState(initState);\n  const { fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n\n  // montior div size changes and recalculate on resize\n  let animationFrameId: number | null = null;\n  const [ro] = useState(\n    () =>\n      new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n          setState(initState());\n        });\n      }),\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      ro.observe(ref.current);\n    }\n    return () => {\n      animationFrameId && window.cancelAnimationFrame(animationFrameId);\n      ro.disconnect();\n    };\n  }, [animationFrameId, ro]);\n\n  // check overflow and resize font\n  useIsoLayoutEffect(() => {\n    const isDone = Math.abs(fontSize - fontSizePrev) <= resolution;\n    const isOverflow =\n      !!ref.current &&\n      (ref.current.scrollHeight > ref.current.offsetHeight ||\n        ref.current.scrollWidth > ref.current.offsetWidth);\n    const isAsc = fontSize > fontSizePrev;\n\n    // return if the font size has been adjusted \"enough\" (change within `resolution`)\n    // reduce font size by one increment if it's overflowing\n    if (isDone) {\n      if (isOverflow) {\n        const fontSizeNew =\n          fontSizePrev < fontSize\n            ? fontSizePrev\n            : fontSize - (fontSizePrev - fontSize);\n        setState({\n          fontSize: fontSizeNew,\n          fontSizeMax,\n          fontSizeMin,\n          fontSizePrev,\n        });\n      }\n      return;\n    }\n\n    // binary search to adjust font size\n    let delta: number;\n    let newMax = fontSizeMax;\n    let newMin = fontSizeMin;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n      newMax = Math.min(fontSizeMax, fontSize);\n    } else {\n      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n      newMin = Math.max(fontSizeMin, fontSize);\n    }\n    setState({\n      fontSize: fontSize + delta / 2,\n      fontSizeMax: newMax,\n      fontSizeMin: newMin,\n      fontSizePrev: fontSize,\n    });\n  }, [fontSize, fontSizeMax, fontSizeMin, fontSizePrev, ref, resolution]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"]},"metadata":{},"sourceType":"script"}