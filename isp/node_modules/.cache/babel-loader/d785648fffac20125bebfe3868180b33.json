{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = getStyle;\nexports.getOverflow = getOverflow;\nexports.hasOverflow = exports.css = exports.camelize = exports.uniqId = void 0;\n/**\n * @file utils.js\n * @description DOM utility functions\n */\n// Simple way to generate a unique id\n\nvar id = 0;\n\nvar uniqId = function uniqId() {\n  return \"uid-\".concat(Date.now(), \"-\").concat(id++);\n}; // Camelcase a dashed string, ie do-thing => doThing\n\n\nexports.uniqId = uniqId;\n\nvar camelize = function camelize(str) {\n  return str.replace(/-(\\w)/g, function (s, letter) {\n    return letter.toUpperCase();\n  });\n};\n/* eslint-disable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Set multiple css properties on an element `el` by\n// passing in a `style` object that defines what properties\n// to set and their value\n\n\nexports.camelize = camelize;\n\nvar css = function css(el, styles) {\n  for (var property in styles) {\n    el.style[property] = styles[property];\n  }\n};\n/* eslint-enable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Get the current style property value for the given element\n\n\nexports.css = css;\n\nfunction getStyle(el, styleProp) {\n  if (el.currentStyle) {\n    return el.currentStyle[camelize(styleProp)];\n  } else if (document.defaultView && document.defaultView.getComputedStyle) {\n    return document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  }\n\n  return el.style[camelize(styleProp)];\n}\n\nfunction getOverflow(el) {\n  return [el.clientWidth < el.scrollWidth, el.clientHeight < el.scrollHeight];\n}\n\nvar hasOverflow = function hasOverflow(el) {\n  return getOverflow(el).some(function (v) {\n    return v === true;\n  });\n};\n\nexports.hasOverflow = hasOverflow;","map":{"version":3,"sources":["/home/theo/computerScience/js/isp/isp/node_modules/react-scale-text/lib/dom-utils.js"],"names":["Object","defineProperty","exports","value","getStyle","getOverflow","hasOverflow","css","camelize","uniqId","id","concat","Date","now","str","replace","s","letter","toUpperCase","el","styles","property","style","styleProp","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","clientWidth","scrollWidth","clientHeight","scrollHeight","some","v"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB;AACAH,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,GAAR,GAAcL,OAAO,CAACM,QAAR,GAAmBN,OAAO,CAACO,MAAR,GAAiB,KAAK,CAA7E;AAEA;;;;AAIA;;AACA,IAAIC,EAAE,GAAG,CAAT;;AAEA,IAAID,MAAM,GAAG,SAASA,MAAT,GAAkB;AAC7B,SAAO,OAAOE,MAAP,CAAcC,IAAI,CAACC,GAAL,EAAd,EAA0B,GAA1B,EAA+BF,MAA/B,CAAsCD,EAAE,EAAxC,CAAP;AACD,CAFD,C,CAEG;;;AAGHR,OAAO,CAACO,MAAR,GAAiBA,MAAjB;;AAEA,IAAID,QAAQ,GAAG,SAASA,QAAT,CAAkBM,GAAlB,EAAuB;AACpC,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,UAAUC,CAAV,EAAaC,MAAb,EAAqB;AAChD,WAAOA,MAAM,CAACC,WAAP,EAAP;AACD,GAFM,CAAP;AAGD,CAJD;AAKA;AACA;AACA;AACA;;;AAGAhB,OAAO,CAACM,QAAR,GAAmBA,QAAnB;;AAEA,IAAID,GAAG,GAAG,SAASA,GAAT,CAAaY,EAAb,EAAiBC,MAAjB,EAAyB;AACjC,OAAK,IAAIC,QAAT,IAAqBD,MAArB,EAA6B;AAC3BD,IAAAA,EAAE,CAACG,KAAH,CAASD,QAAT,IAAqBD,MAAM,CAACC,QAAD,CAA3B;AACD;AACF,CAJD;AAKA;AACA;;;AAGAnB,OAAO,CAACK,GAAR,GAAcA,GAAd;;AAEA,SAASH,QAAT,CAAkBe,EAAlB,EAAsBI,SAAtB,EAAiC;AAC/B,MAAIJ,EAAE,CAACK,YAAP,EAAqB;AACnB,WAAOL,EAAE,CAACK,YAAH,CAAgBhB,QAAQ,CAACe,SAAD,CAAxB,CAAP;AACD,GAFD,MAEO,IAAIE,QAAQ,CAACC,WAAT,IAAwBD,QAAQ,CAACC,WAAT,CAAqBC,gBAAjD,EAAmE;AACxE,WAAOF,QAAQ,CAACC,WAAT,CAAqBC,gBAArB,CAAsCR,EAAtC,EAA0C,IAA1C,EAAgDS,gBAAhD,CAAiEL,SAAjE,CAAP;AACD;;AAED,SAAOJ,EAAE,CAACG,KAAH,CAASd,QAAQ,CAACe,SAAD,CAAjB,CAAP;AACD;;AAED,SAASlB,WAAT,CAAqBc,EAArB,EAAyB;AACvB,SAAO,CAACA,EAAE,CAACU,WAAH,GAAiBV,EAAE,CAACW,WAArB,EAAkCX,EAAE,CAACY,YAAH,GAAkBZ,EAAE,CAACa,YAAvD,CAAP;AACD;;AAED,IAAI1B,WAAW,GAAG,SAASA,WAAT,CAAqBa,EAArB,EAAyB;AACzC,SAAOd,WAAW,CAACc,EAAD,CAAX,CAAgBc,IAAhB,CAAqB,UAAUC,CAAV,EAAa;AACvC,WAAOA,CAAC,KAAK,IAAb;AACD,GAFM,CAAP;AAGD,CAJD;;AAMAhC,OAAO,CAACI,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = getStyle;\nexports.getOverflow = getOverflow;\nexports.hasOverflow = exports.css = exports.camelize = exports.uniqId = void 0;\n\n/**\n * @file utils.js\n * @description DOM utility functions\n */\n// Simple way to generate a unique id\nvar id = 0;\n\nvar uniqId = function uniqId() {\n  return \"uid-\".concat(Date.now(), \"-\").concat(id++);\n}; // Camelcase a dashed string, ie do-thing => doThing\n\n\nexports.uniqId = uniqId;\n\nvar camelize = function camelize(str) {\n  return str.replace(/-(\\w)/g, function (s, letter) {\n    return letter.toUpperCase();\n  });\n};\n/* eslint-disable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Set multiple css properties on an element `el` by\n// passing in a `style` object that defines what properties\n// to set and their value\n\n\nexports.camelize = camelize;\n\nvar css = function css(el, styles) {\n  for (var property in styles) {\n    el.style[property] = styles[property];\n  }\n};\n/* eslint-enable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Get the current style property value for the given element\n\n\nexports.css = css;\n\nfunction getStyle(el, styleProp) {\n  if (el.currentStyle) {\n    return el.currentStyle[camelize(styleProp)];\n  } else if (document.defaultView && document.defaultView.getComputedStyle) {\n    return document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  }\n\n  return el.style[camelize(styleProp)];\n}\n\nfunction getOverflow(el) {\n  return [el.clientWidth < el.scrollWidth, el.clientHeight < el.scrollHeight];\n}\n\nvar hasOverflow = function hasOverflow(el) {\n  return getOverflow(el).some(function (v) {\n    return v === true;\n  });\n};\n\nexports.hasOverflow = hasOverflow;"]},"metadata":{},"sourceType":"script"}