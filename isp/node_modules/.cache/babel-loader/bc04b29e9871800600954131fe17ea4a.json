{"ast":null,"code":"var _jsxFileName = \"/home/theo/computerScience/js/shanghai/shanghai/src/Chat.js\";\nimport React from 'react';\nimport { Button, TextField, Input, FormControl, Divider, Box, List, ListItem, ListSubheader, ListItemText, InputAdornment, IconButton } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSend = () => {\n      console.log(\"sending message\", this.state.sendMessage);\n      this.socket.emit(\"sendMessage\", this.state.sendMessage);\n      this.setState((state, props) => ({\n        sendMessage: ''\n      }));\n    };\n\n    this.renderItem = (sItem, sIndex) => {\n      const senderName = sItem.senderName === this.me.name ? \"You\" : sItem.senderName;\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: `section-${sIndex}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          padding: \"0\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(ListSubheader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }\n      }, senderName), sItem.lines.map((item, index) => /*#__PURE__*/React.createElement(ListItem, {\n        key: `item-${sIndex}-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ListItemText, {\n        primary: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 8\n        }\n      }))), /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 6\n        }\n      })));\n    };\n\n    this.socket = props.socket;\n    console.log(props.messages);\n    this.messages = this.formatMessages(props.messages);\n    this.me = props.me;\n    this.state = {\n      messages: this.messages,\n      sendMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    this.socket.emit(\"userSync\", this.me.name);\n    this.socket.on(\"messagesUpdated\", messages => {\n      this.messages = this.formatMessages(messages);\n      this.setState((state, props) => ({\n        messages: this.messages\n      }));\n    });\n  }\n\n  formatMessages(messages) {\n    let newMessages = new Array();\n\n    for (let message of messages) {\n      console.log(message);\n      if (newMessages.length === 0 || message.senderName != newMessages[newMessages.length - 1].senderName) newMessages.push({\n        lines: [message.message],\n        senderName: message.senderName,\n        serverMessage: message.serverMessage\n      });else newMessages[newMessages.length - 1].lines.push(message.message);\n    }\n\n    return newMessages;\n  }\n\n  messageChanged(e) {\n    e.persist();\n    this.setState((state, props) => ({\n      sendMessage: e.target.value\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      dense: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, this.state.messages.map(this.renderItem)), /*#__PURE__*/React.createElement(TextField, {\n      value: \"Hey\",\n      label: \"Send a message...\",\n      variant: \"outlined\",\n      onChange: e => this.messageChanged(e),\n      InputProps: {\n        endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          onClick: this.handleSend,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(SendIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 8\n          }\n        })))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/theo/computerScience/js/shanghai/shanghai/src/Chat.js"],"names":["React","Button","TextField","Input","FormControl","Divider","Box","List","ListItem","ListSubheader","ListItemText","InputAdornment","IconButton","SendIcon","Chat","Component","constructor","props","handleSend","console","log","state","sendMessage","socket","emit","setState","renderItem","sItem","sIndex","senderName","me","name","padding","lines","map","item","index","messages","formatMessages","componentDidMount","on","newMessages","Array","message","length","push","serverMessage","messageChanged","e","persist","target","value","render","endAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, TextField, Input, FormControl, Divider, Box, List, ListItem, ListSubheader, ListItemText, InputAdornment, IconButton } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\n\nclass Chat extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.socket = props.socket;\n\t\tconsole.log(props.messages);\n\t\tthis.messages = this.formatMessages(props.messages);\n\t\tthis.me = props.me;\n\n\t\tthis.state = {messages: this.messages, sendMessage: ''};\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.socket.emit(\"userSync\", this.me.name);\n\n\t\tthis.socket.on(\"messagesUpdated\", messages => {\n\t\t\tthis.messages = this.formatMessages(messages);\n\t\t\tthis.setState((state, props) => ({\n\t\t\t\tmessages: this.messages\n\t\t\t}));\n\t\t});\n\t}\n\n\tformatMessages(messages){\n\t\tlet newMessages = new Array();\n\t\tfor (let message of messages){\n\t\t\tconsole.log(message);\n\t\t\tif (newMessages.length === 0 || (message.senderName != newMessages[newMessages.length-1].senderName))\n\t\t\t\tnewMessages.push({lines: [message.message], senderName: message.senderName, serverMessage: message.serverMessage})\n\t\t\telse\n\t\t\t\tnewMessages[newMessages.length-1].lines.push(message.message);\n\t\t}\n\t\treturn newMessages;\n\t}\n\n\tmessageChanged(e){\n\t\te.persist();\n\t\tthis.setState((state, props) => ({\n\t\t\tsendMessage: e.target.value\n\t\t}));\n\t}\n\n\thandleSend = () => {\n\t\tconsole.log(\"sending message\", this.state.sendMessage);\n\t\tthis.socket.emit(\"sendMessage\", this.state.sendMessage);\n\t\tthis.setState((state, props) => ({\n\t\t\tsendMessage: ''\n\t\t}));\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t<List dense>{this.state.messages.map(this.renderItem)}</List>\n\t\t\t\t<TextField value=\"Hey\" label=\"Send a message...\" variant=\"outlined\" onChange={(e) => this.messageChanged(e)} InputProps={{\n\t\t\t\t\tendAdornment: <InputAdornment position='end'>\n\t\t\t\t\t\t\t<IconButton onClick={this.handleSend}>\n\t\t\t\t\t\t\t<SendIcon/>\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</InputAdornment>\n\t\t\t\t}}/>\n\t\t\t</Box>\n\t\t);\n\t}\n\n\trenderItem = (sItem, sIndex) => {\n\t\tconst senderName = (sItem.senderName === this.me.name ? \"You\" : sItem.senderName);\n\t\treturn (\n\t\t\t<li key={`section-${sIndex}`}>\n\t\t\t\t<ul style={{padding: \"0\"}}>\n\t\t\t\t\t<ListSubheader>{senderName}</ListSubheader>\n\t\t\t\t\t{sItem.lines.map((item, index) => (\n\t\t\t\t\t\t<ListItem key={`item-${sIndex}-${index}`}>\n\t\t\t\t\t\t\t<ListItemText primary={item}/>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))}\n\t\t\t\t\t<Divider/>\n\t\t\t\t</ul>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}