{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getFillSize;\n\nvar _domUtils = require(\"./dom-utils\");\n\nfunction _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n} // Determine the font-size to set on the element `el` that will\n// allow the first child of that element to fill the maximum height\n// and width without causing overflow\n\n\nfunction getFillSize(el, minFontSize, maxFontSize) {\n  var widthOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var factor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1; // Make an initial guess at font-size that fits width\n\n  var fontSize = Math.min(Math.max(Math.min(Number(el.offsetWidth) / (factor * 10), maxFontSize), minFontSize));\n  var step = 1;\n  var complete;\n\n  while (!complete) {\n    el.style.fontSize = \"\".concat(fontSize, \"px\");\n\n    var _getOverflow = (0, _domUtils.getOverflow)(el),\n        _getOverflow2 = _slicedToArray(_getOverflow, 2),\n        overflowWidth = _getOverflow2[0],\n        overflowHeight = _getOverflow2[1];\n\n    if (!widthOnly && (overflowHeight || overflowWidth)) {\n      if (fontSize <= minFontSize) {\n        fontSize = minFontSize;\n        complete = true;\n      } else {\n        fontSize -= step;\n        complete = true;\n      }\n    } else if (widthOnly && overflowWidth) {\n      fontSize -= step;\n      complete = true;\n    } else if (fontSize >= maxFontSize) {\n      fontSize = maxFontSize;\n      complete = true;\n    } else if (!complete) {\n      fontSize += step;\n    }\n  }\n\n  return fontSize;\n}\n/* eslint-enable no-param-reassign */","map":{"version":3,"sources":["/home/theo/computerScience/js/isp/isp/node_modules/react-scale-text/lib/get-fillsize.js"],"names":["Object","defineProperty","exports","value","default","getFillSize","_domUtils","require","_sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","_slicedToArray","Array","isArray","TypeError","el","minFontSize","maxFontSize","widthOnly","arguments","factor","fontSize","Math","min","max","Number","offsetWidth","step","complete","style","concat","_getOverflow","getOverflow","_getOverflow2","overflowWidth","overflowHeight"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getFillSize;\n\nvar _domUtils = require(\"./dom-utils\");\n\nfunction _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }\n\n// Determine the font-size to set on the element `el` that will\n// allow the first child of that element to fill the maximum height\n// and width without causing overflow\nfunction getFillSize(el, minFontSize, maxFontSize) {\n  var widthOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var factor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  // Make an initial guess at font-size that fits width\n  var fontSize = Math.min(Math.max(Math.min(Number(el.offsetWidth) / (factor * 10), maxFontSize), minFontSize));\n  var step = 1;\n  var complete;\n\n  while (!complete) {\n    el.style.fontSize = \"\".concat(fontSize, \"px\");\n\n    var _getOverflow = (0, _domUtils.getOverflow)(el),\n        _getOverflow2 = _slicedToArray(_getOverflow, 2),\n        overflowWidth = _getOverflow2[0],\n        overflowHeight = _getOverflow2[1];\n\n    if (!widthOnly && (overflowHeight || overflowWidth)) {\n      if (fontSize <= minFontSize) {\n        fontSize = minFontSize;\n        complete = true;\n      } else {\n        fontSize -= step;\n        complete = true;\n      }\n    } else if (widthOnly && overflowWidth) {\n      fontSize -= step;\n      complete = true;\n    } else if (fontSize >= maxFontSize) {\n      fontSize = maxFontSize;\n      complete = true;\n    } else if (!complete) {\n      fontSize += step;\n    }\n  }\n\n  return fontSize;\n}\n/* eslint-enable no-param-reassign */"]},"metadata":{},"sourceType":"script"}